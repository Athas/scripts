#!/bin/sh

# Manipulate `surf` via `sinmenu`-based interface.
#
# This script does:
#
#   * stores history of: successful URI entries and certain smart prefix entries, e.g., "g foobar";
#   * direct bookmarks (same list as history)
#   * information debug, show all X properties on the `surf` window.
#   * smart prefixes e.g. `g` for Google search, `t` for TinyURL, etc.
#   * delete (with smart prefix `x`)
#   * history browsing, in conjunction with `surfsession`.
#
# Usage: `surfbrowse` _xid_ _action_
#
# _action_ must be one of `bookmark`, `go`, `go_raw`, `info` or `history`
#
# To install, add the following to your `config.h`:
#
#     #define BROWSE(p) { .v = (char *[]){ "/bin/sh", "-c", "surfbrowse $1 $0", p, winid, NULL } }
#
# Then add some bindings to your keylist, for example the following:
#
#     { 0,                              GDK_g,      spawn,      BROWSE("go") },
#     { 0,                              GDK_b,      spawn,      BROWSE("bookmark") },
#     { GDK_SHIFT_MASK,                 GDK_i,      spawn,      BROWSE("info") },
#     { GDK_CONTROL_MASK|GDK_SHIFT_MASK,GDK_g,      spawn,      BROWSE("go_raw") }
#
# Based on a shell script by Peter John Hartman, pancake and nibble.

set -e # Die on error

font='-*-terminus-medium-*-*-*-*-*-*-*-*-*-*-*'
normbgcolor='#181818'
normfgcolor='#e9e9e9'
selbgcolor=$normbgcolor
selfgcolor='#dd6003'

surfcache=${XDG_CACHE_HOME:-~/.cache}/surf
history=$surfcache/history
visits=$surfcache/visits

xid=$1
p=$2

menu="browserfield --nb $normbgcolor --nf $normfgcolor \
       --sb $selbgcolor --sf $selfgcolor -l 10 -b"

rawmenu="sinmenu --nb $normbgcolor --nf $normfgcolor \
       --sb $selbgcolor --sf $selfgcolor -l 10 -b"

s_get_prop() { # xprop
    xprop -id $xid $1 | cut -d '"' -f 2
}

s_set_prop() { # xprop value
    [ -n "$2" ] && xprop -id $xid -f $1 8s -set $1 "$2"
}

s_write_f() { # file value
    [ -n "$2" ] && (sed -i "\|$2|d" $1; echo "$2" >> $1)
}

s_set_write_proper_uri() { # uri
    s_set_prop WM_ICON_NAME '' || true
    s_set_prop _SURF_GO "$1"
    s_write_f $history "$1"
}

case "$p" in
    info)
        xprop -id $xid | sed 's/\t/    /g' | $rawmenu -l 20
        ;;
    bookmark)
        uri=$(s_get_prop _SURF_URI)
        s_write_f $history "$uri"
        ;;
    del)
        sel=$(tac $history 2>/dev/null | $rawmenu -p 'uri [dgitwhy*]:')
        (rm "$history" && awk '$0!=SEL' "SEL=$sel" > "$history") < "$history"
        ;;
    history)
        sel=$(tac $visits 2>/dev/null | $rawmenu -p 'uri from history:' | awk -F' - ' '{print $1}')
        s_set_prop _SURF_GO "$sel"
        ;;
    go_raw)
        uri=$(echo $(s_get_prop _SURF_URI) | $menu -p "uri:")
        s_set_prop _SURF_GO "$uri"
        ;;
    go)
        sel=$(tac $history 2> /dev/null | $menu -p "uri [dgtwuy*]:")
        [ -z "$sel" ] && exit
        opt=$(echo $sel | cut -d ' ' -f 1)
        arg=$(echo $sel | cut -d ' ' -f 2-)
        save=0
        case "$opt" in
            "g")
                uri="http://www.google.com/search?q=$arg"
                save=1
                ;;
            "i")
                uri="http://www.google.com/images?q=$arg"
                save=1
                ;;
            "t")
                uri="http://tinyurl.com/create.php?url=`s_get_prop _SURF_URI`"
                ;;
            "w")
                uri="http://wikipedia.org/wiki/$arg"
                save=1
                ;;
            "h")
                uri="http://haskell.org/hoogle/?q=$arg"
                save=1
                ;;
            "y")
                uri="http://www.youtube.com/results?search_query=$arg&aq=f"
                save=1
                ;;
            *)
                uri="$sel"
                save=2
                ;;
        esac

    # only set the uri; don't write to file
        [ $save -eq 0 ] && s_set_prop _SURF_GO "$uri"
    # set the url and write exactly what the user inputed to the file
        [ $save -eq 1 ] && (s_set_prop _SURF_GO "$uri"; s_write_f $history "$sel")
    # try to set the uri only if it is a success
        [ $save -eq 2 ] && s_set_write_proper_uri "$uri"
        ;;
    *)
        echo Unknown xprop
        ;;
esac
